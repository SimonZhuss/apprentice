<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
       xmlns:master-slave="http://shardingsphere.io/schema/shardingsphere/masterslave"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://shardingsphere.io/schema/shardingsphere/sharding 
                        http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd
                        http://shardingsphere.io/schema/shardingsphere/masterslave
                        http://shardingsphere.io/schema/shardingsphere/masterslave/master-slave.xsd">
    <context:annotation-config />
    <context:component-scan base-package="io.shardingsphere.example.spring.namespace.jpa" />
    
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="shardingDataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:database="MYSQL" />
        </property>
        <property name="packagesToScan" value="io.shardingsphere.example.spring.namespace.jpa.entity" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" p:entityManagerFactory-ref="entityManagerFactory" />
    <tx:annotation-driven />
    
    <!-- db -->
    <bean id="master" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.master.driverClassName}" />
        <property name="url" value="${jdbc.master.url}" />
        <property name="username" value="${jdbc.master.username}" />
        <property name="password" value="${jdbc.master.password}" />
        
        <property name="maxActive" value="100"/>
	    <property name="initialSize" value="10"/>
	    <property name="maxWait" value="60000"/>
	    <property name="minIdle" value="5"/>
        
        <property name="testOnBorrow">
            <value>true</value>
        </property>
        <property name="validationQuery">
            <value>SELECT 1 FROM DUAL</value>
        </property>
    </bean>
    
    <bean id="slave1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.slave1.driverClassName}" />
        <property name="url" value="${jdbc.slave1.url}" />
        <property name="username" value="${jdbc.slave1.username}" />
        <property name="password" value="${jdbc.slave1.password}" />
        
        <property name="maxActive" value="100"/>
	    <property name="initialSize" value="10"/>
	    <property name="maxWait" value="60000"/>
	    <property name="minIdle" value="5"/>
        
        <property name="testOnBorrow">
            <value>true</value>
        </property>
        <property name="validationQuery">
            <value>SELECT 1 FROM DUAL</value>
        </property>
    </bean>
    
    <bean id="slave2" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.slave2.driverClassName}" />
        <property name="url" value="${jdbc.slave2.url}" />
        <property name="username" value="${jdbc.slave2.username}" />
        <property name="password" value="${jdbc.slave2.password}" />
        
        <property name="maxActive" value="100"/>
	    <property name="initialSize" value="10"/>
	    <property name="maxWait" value="60000"/>
	    <property name="minIdle" value="5"/>
        
        <property name="testOnBorrow">
            <value>true</value>
        </property>
        <property name="validationQuery">
            <value>SELECT 1 FROM DUAL</value>
        </property>
    </bean>

	<!-- 读写分离 -->
    <bean id="randomStrategy" class="io.shardingsphere.core.api.algorithm.masterslave.RandomMasterSlaveLoadBalanceAlgorithm" />
    <master-slave:data-source id="ds_ms0" master-data-source-name="master" slave-data-source-names="slave1,slave2" strategy-ref="randomStrategy" />
	<!-- 分库 -->
    <sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="ds_ms$->{user_id % 2}" />
    <!-- 分表 -->
    <sharding:inline-strategy id="orderTableStrategy" sharding-column="order_id" algorithm-expression="t_order$->{order_id % 2}" />
    <sharding:inline-strategy id="orderItemTableStrategy" sharding-column="order_id" algorithm-expression="t_order_item$->{order_id % 2}" />

    <sharding:data-source id="shardingDataSource">
        <!-- 数据分片配置规则   
        data-source-names 数据源Bean列表，多个Bean以逗号分隔
        default-data-source-name 未配置分片规则的表将通过默认数据源定位
        default-database-strategy-ref 默认数据库分片策略，对应<sharding:xxx-strategy>中的策略Id，缺省表示不分库
        default-table-strategy-ref 默认表分片策略，对应<sharding:xxx-strategy>中的策略Id，缺省表示不分表
        default-key-generator-ref 默认自增列值生成器引用，缺省使用io.shardingsphere.core.keygen.DefaultKeyGenerator。该类需实现KeyGenerator接口-->
        <sharding:sharding-rule data-source-names="ds_ms0" default-database-strategy-ref="">
        	<!-- 表分片规则配置对象 -->
            <sharding:table-rules>
            	<!-- 
            		logic-table 逻辑表名称
            		actual-data-nodes 
            	 -->
                <sharding:table-rule logic-table="t_order" actual-data-nodes="ds_ms$->{0..1}.t_order$->{0..1}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderTableStrategy" generate-key-column-name="order_id" />
                <sharding:table-rule logic-table="t_order_item" actual-data-nodes="ds_ms$->{0..1}.t_order_item$->{0..1}" database-strategy-ref="databaseStrategy" table-strategy-ref="orderItemTableStrategy" generate-key-column-name="order_item_id" />
            	<!-- 不需要分库分表，database-strategy和table-strategy都不需要配置 -->
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>
</beans>